unit NuLib.Random.Detail.Engines;

interface

uses
  NuLib.Random.Common;

function UInt32ToFloatEngine(const UInt32Engine: UInt32RandomEngine): FloatRandomEngine;
function FloatToUInt32Engine(const FloatEngine: FloatRandomEngine): UInt32RandomEngine;

implementation

function UInt32ToFloatEngine(const UInt32Engine: UInt32RandomEngine): FloatRandomEngine;
begin
  result :=
    function(): double
    var
      v1, v2: UInt32;
      x: UInt64;
    begin
      v1 := UInt32Engine();
      v2 := UInt32Engine();
      // IEEE double precision has 53 bit mantissa
      // so only use 21+32 bits
      x := (UInt64(v1 and $1fffff) shl 32) + v2;
      result := x * (1.0 / 9007199254740992.0);
      Assert(result < 1.0, 'Invalid number generated by FloatRandomEngine');
    end;
end;

function FloatToUInt32Engine(const FloatEngine: FloatRandomEngine): UInt32RandomEngine;
begin
  result :=
    function(): UInt32
    var
      v: double;
    begin
      v := FloatEngine();
      Assert(v < 1.0, 'Invalid number generated by FloatRandomEngine');
      result := Round(4294967296 * v) and $ffffffff;
    end;
end;

end.
